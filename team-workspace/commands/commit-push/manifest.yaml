# Commit-Push Command Manifest
# Defines collaboration capabilities and data requirements

command:
  name: "commit-push"
  version: "1.0.0"
  type: "utility"
  description: "Automated git workflow with content lifecycle integration"
  command_file: "/Users/colemorton/.claude/commands/commit_push.md"

capabilities:
  reads:
    - git_status
    - workspace_changes
    - content_authority_files
    - topic_registry
    - superseding_log
    - command_outputs

  produces:
    - git_commits
    - commit_messages
    - content_synchronization
    - registry_updates
    - lifecycle_validation

dependencies:
  required: []
  optional:
    - command: "architect"
      output_type: "implementation_plans"
      enhancement: "Commits implementation plans with proper authority"
    - command: "code-owner"
      output_type: "technical_health_assessment"
      enhancement: "Commits technical assessments with lifecycle management"
    - command: "product-owner"
      output_type: "strategic_decisions"
      enhancement: "Commits strategic decisions with authority establishment"
    - command: "business-analyst"
      output_type: "requirements_analysis"
      enhancement: "Commits requirements with proper superseding workflow"
  conflicts: []

data_schema:
  inputs:
    commit_scope:
      type: "string"
      required: false
      source: "user_input"
    workspace_state:
      type: "object"
      required: true
      source: "git_analysis"

  outputs:
    commit_record:
      type: "git_commit"
      location: "git_repository"
      format: "git_standard"
      metadata_required: true
    lifecycle_validation:
      type: "markdown"
      location: "/team-workspace/commands/commit-push/outputs/"
      filename_pattern: "commit-validation-{timestamp}.md"
      format: "validation_report"
      metadata_required: true

collaboration:
  consumption_pattern: "validation_focused"
  pre_execution_behavior:
    - "Validate workspace content authority"
    - "Check topic registry consistency"
    - "Verify superseding workflow compliance"
    - "Analyze content lifecycle integrity"

  output_sharing: "immediate"
  post_execution_behavior:
    - "Synchronize topic registry with git state"
    - "Validate authority file consistency"
    - "Notify commands of committed content"
    - "Update lifecycle tracking"

  cache_strategy: "none"
  cache_duration: "0"

  notification_events:
    - event: "authority_content_committed"
      notify: ["architect", "code-owner", "product-owner", "business-analyst"]
      payload: ["committed_files", "authority_updates"]
    - event: "lifecycle_violation_detected"
      notify: ["all_commands"]
      payload: ["violation_details", "resolution_required"]
    - event: "registry_sync_complete"
      notify: ["coordination_system"]
      payload: ["sync_status", "consistency_check"]

quality_standards:
  validation_criteria:
    - "All authority files follow lifecycle patterns"
    - "Topic registry is consistent with committed content"
    - "Superseding workflow properly executed"
    - "Content conflicts resolved before commit"
    - "Commit message accurately reflects changes"

  output_requirements:
    - "Meaningful commit messages with context"
    - "Authority file validation passed"
    - "Registry consistency maintained"
    - "Lifecycle compliance verified"
    - "Proper attribution included"

performance_characteristics:
  typical_execution_time: "15s"
  complexity_factors:
    - "Number of changed files"
    - "Authority file validation complexity"
    - "Registry synchronization requirements"
    - "Pre-commit hook execution time"

  optimization_strategies:
    - "Parallel validation of authority files"
    - "Incremental registry updates"
    - "Cached validation results"

integration_patterns:
  workflow_chains:
    - name: "content_authority_commit"
      sequence: ["any_content_command", "commit-push"]
      trigger: "authority_content_created"
    - name: "lifecycle_compliant_commit"
      sequence: ["superseding_workflow", "commit-push"]
      trigger: "content_superseding_complete"

  data_flow:
    incoming:
      - "Authority content from all commands"
      - "Registry updates from coordination system"
      - "Superseding events from workflow system"
    outgoing:
      - "Git commits to repository"
      - "Validation reports to coordination system"
      - "Notification events to all commands"

# Topic Ownership Configuration
topic_ownership:
  primary_topics:
    - "git-operations"
    - "content-synchronization"
    - "lifecycle-validation"

  secondary_topics:
    - "implementation-plans" # Can commit with authority validation
    - "technical-health" # Can commit with authority validation
    - "product-strategy" # Can commit with authority validation
    - "requirements" # Can commit with authority validation

  collaboration_permissions:
    read_access: ["architect", "code-owner", "product-owner", "business-analyst"]
    write_access: ["commit-push"]
    coordination_required: [] # Utility command, no specific coordination needed
