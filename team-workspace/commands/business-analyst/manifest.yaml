# Business-Analyst Command Manifest
# Defines collaboration capabilities and data requirements

command:
  name: "business-analyst"
  version: "1.0.0"
  type: "analysis"
  description: "Requirements gathering, process optimization, and stakeholder alignment"
  command_file: "/Users/colemorton/.claude/commands/business_analyst.md"

capabilities:
  reads:
    - stakeholder_requirements
    - business_processes
    - regulatory_constraints
    - market_analysis
    - user_feedback
    - system_integrations
    - compliance_requirements

  produces:
    - requirements_analysis
    - process_optimization_plans
    - stakeholder_analysis
    - compliance_assessments
    - user_acceptance_criteria
    - business_process_models

dependencies:
  required: []
  optional:
    - command: "product-owner"
      output_type: "strategic_decisions"
      enhancement: "Aligns requirements with business strategy"
    - command: "code-owner"
      output_type: "technical_health_assessment"
      enhancement: "Validates requirements against technical constraints"
    - command: "architect"
      output_type: "implementation_plans"
      enhancement: "Ensures requirements are technically feasible"
  conflicts: []

data_schema:
  inputs:
    stakeholder_context:
      type: "object"
      required: true
      schema: "/team-workspace/shared/stakeholder-context.yaml"
    analysis_type:
      type: "string"
      required: true
      source: "user_input"
      values: ["requirements", "process-optimization", "integration", "compliance"]
    analysis_scope:
      type: "string"
      required: false
      source: "user_input"

  outputs:
    requirements_analysis:
      type: "markdown"
      location: "/team-workspace/commands/business-analyst/outputs/"
      filename_pattern: "requirements-analysis-{type}-{timestamp}.md"
      format: "structured_requirements"
      metadata_required: true
    process_analysis:
      type: "markdown"
      location: "/team-workspace/commands/business-analyst/outputs/"
      filename_pattern: "process-analysis-{scope}-{timestamp}.md"
      format: "process_optimization"
      metadata_required: true

collaboration:
  consumption_pattern: "stakeholder_driven"
  pre_execution_behavior:
    - "Load stakeholder context and constraints"
    - "Review strategic decisions from product-owner"
    - "Analyze technical constraints from code-owner"
    - "Consider implementation feasibility from architect"

  output_sharing: "immediate"
  post_execution_behavior:
    - "Store analysis with stakeholder metadata"
    - "Update requirements registry"
    - "Notify dependent commands of new requirements"
    - "Cache stakeholder context for efficiency"

  cache_strategy: "requirements_based"
  cache_duration: "14d"

  notification_events:
    - event: "requirements_conflict_detected"
      notify: ["product-owner", "architect"]
      payload: ["conflict_details", "resolution_options"]
    - event: "compliance_risk_identified"
      notify: ["product-owner", "code-owner", "legal_team"]
      payload: ["compliance_gap", "remediation_plan"]
    - event: "stakeholder_alignment_required"
      notify: ["product-owner", "executive_team"]
      payload: ["alignment_issue", "stakeholder_positions"]

quality_standards:
  validation_criteria:
    - "Requirements are specific and measurable"
    - "Stakeholder perspectives balanced"
    - "Compliance requirements addressed"
    - "Technical feasibility considered"
    - "Acceptance criteria clearly defined"

  output_requirements:
    - "SMART requirements (Specific, Measurable, Achievable, Relevant, Time-bound)"
    - "Stakeholder impact assessment"
    - "Process optimization recommendations"
    - "Compliance gap analysis"
    - "User acceptance test scenarios"

performance_characteristics:
  typical_execution_time: "40s"
  complexity_factors:
    - "Number of stakeholder groups"
    - "Regulatory complexity"
    - "Process integration depth"
    - "Requirements interdependency"

  optimization_strategies:
    - "Parallel stakeholder analysis"
    - "Incremental requirements gathering"
    - "Cached regulatory context"

integration_patterns:
  workflow_chains:
    - name: "requirements_to_implementation"
      sequence: ["business-analyst", "architect"]
      trigger: "requirements_analysis_complete"
    - name: "strategic_requirements_alignment"
      sequence: ["business-analyst", "product-owner"]
      trigger: "requirements_gathering_complete"

  data_flow:
    incoming:
      - "Strategic decisions from product-owner"
      - "Technical constraints from code-owner"
      - "Implementation feasibility from architect"
    outgoing:
      - "Requirements analysis to architect"
      - "Business requirements to product-owner"
      - "Compliance assessments to legal team"

# Topic Ownership Configuration
topic_ownership:
  primary_topics:
    - "requirements"
    - "stakeholder-analysis"
    - "process-optimization"
    - "compliance-assessments"

  secondary_topics:
    - "product-strategy" # Can provide requirements perspective
    - "implementation-plans" # Can validate against requirements
    - "technical-health" # Can assess impact on business processes

  collaboration_permissions:
    read_access: ["product-owner", "architect", "code-owner"]
    write_access: ["business-analyst"]
    coordination_required: ["product-owner"] # For strategic alignment
