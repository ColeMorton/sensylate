# Code-Owner Command Manifest
# Defines collaboration capabilities and data requirements

command:
  name: "code-owner"
  version: "1.0.0"
  type: "analysis"
  description: "Comprehensive codebase health analysis and strategic technical reviews"
  command_file: "/Users/colemorton/.claude/commands/code-owner.md"

capabilities:
  reads:
    - codebase_structure
    - git_history
    - dependency_files
    - test_coverage
    - security_configurations
    - performance_metrics
    - architectural_patterns

  produces:
    - technical_health_assessments
    - risk_analyses
    - modernization_recommendations
    - security_reviews
    - performance_assessments
    - technical_debt_analysis

dependencies:
  required: []
  optional:
    - command: "architect"
      output_type: "implementation_plans"
      enhancement: "Validates technical health against planned implementations"
    - command: "business-analyst"
      output_type: "requirements_analysis"
      enhancement: "Aligns technical health with business requirements"
  conflicts: []

data_schema:
  inputs:
    codebase_context:
      type: "object"
      required: true
      schema: "/team-workspace/shared/codebase-context.yaml"
    focus_area:
      type: "string"
      required: false
      source: "user_input"
      values: ["architecture", "security", "performance", "maintainability", "modernization"]
    assessment_scope:
      type: "string"
      required: false
      source: "user_input"

  outputs:
    technical_health_assessment:
      type: "markdown"
      location: "/team-workspace/commands/code-owner/outputs/"
      filename_pattern: "technical-health-assessment-{timestamp}.md"
      format: "structured_health_report"
      metadata_required: true
    risk_analysis:
      type: "markdown"
      location: "/team-workspace/commands/code-owner/outputs/"
      filename_pattern: "risk-analysis-{focus}-{timestamp}.md"
      format: "prioritized_risk_matrix"
      metadata_required: true

collaboration:
  consumption_pattern: "deep_analysis"
  pre_execution_behavior:
    - "Load codebase context and metrics"
    - "Scan for relevant architecture plans from architect"
    - "Review business requirements from business-analyst"
    - "Analyze git history and change patterns"

  output_sharing: "immediate"
  post_execution_behavior:
    - "Store assessment with comprehensive metadata"
    - "Update technical health registry"
    - "Notify dependent commands of health status"
    - "Cache analysis data for performance"

  cache_strategy: "content_based"
  cache_duration: "7d"

  notification_events:
    - event: "critical_risk_identified"
      notify: ["architect", "product-owner"]
      payload: ["risk_details", "recommended_actions"]
    - event: "security_vulnerability_found"
      notify: ["all_commands", "security_team"]
      payload: ["vulnerability_report", "mitigation_steps"]
    - event: "performance_degradation_detected"
      notify: ["architect", "product-owner"]
      payload: ["performance_metrics", "optimization_recommendations"]

quality_standards:
  validation_criteria:
    - "Assessment covers all specified focus areas"
    - "Risk analysis includes severity and probability ratings"
    - "Recommendations are actionable and prioritized"
    - "Evidence supports all findings"
    - "Compliance requirements addressed"

  output_requirements:
    - "Quantified health metrics with baselines"
    - "Risk-prioritized recommendation matrix"
    - "Specific technical debt identification"
    - "Security posture assessment"
    - "Performance characteristics analysis"

performance_characteristics:
  typical_execution_time: "60s"
  complexity_factors:
    - "Codebase size and complexity"
    - "Number of dependencies"
    - "Security scan depth"
    - "Historical change volume"

  optimization_strategies:
    - "Incremental analysis for large codebases"
    - "Focused scanning based on recent changes"
    - "Parallel security and performance analysis"

integration_patterns:
  workflow_chains:
    - name: "health_driven_planning"
      sequence: ["code-owner", "architect"]
      trigger: "health_assessment_complete"
    - name: "security_first_review"
      sequence: ["code-owner", "business-analyst", "product-owner"]
      trigger: "security_review_required"

  data_flow:
    incoming:
      - "Implementation plans from architect"
      - "Business requirements from business-analyst"
      - "Product priorities from product-owner"
    outgoing:
      - "Technical health metrics to architect"
      - "Risk assessments to product-owner"
      - "Security findings to compliance team"

# Topic Ownership Configuration
topic_ownership:
  primary_topics:
    - "technical-health"
    - "security-reviews"
    - "performance-analysis"
    - "technical-debt"

  secondary_topics:
    - "implementation-plans" # Can contribute technical health perspective
    - "requirements" # Can assess technical feasibility

  collaboration_permissions:
    read_access: ["architect", "product-owner", "business-analyst"]
    write_access: ["code-owner"]
    coordination_required: ["architect"] # For implementation planning
