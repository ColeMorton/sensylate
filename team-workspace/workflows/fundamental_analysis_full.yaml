# Fundamental Analysis Full Workflow Composition
# Complete DASV workflow for fundamental analysis
# Phase 1 implementation with zero functional regression requirement

workflow:
  name: "fundamental_analysis_full"
  version: "1.0.0"
  description: "Complete DASV workflow for institutional-quality fundamental analysis"
  framework: "DASV"
  role: "fundamental_analyst"
  type: "microservice_composition"

# Critical Output Requirements
output_requirements:
  primary_output:
    type: "markdown_document"
    location: "./data/outputs/fundamental_analysis/"
    filename_pattern: "{ticker}_{YYYYMMDD}.md"
    critical_requirement: "Must produce institutional-quality fundamental analysis documents"
    zero_regression: true

# DASV Workflow Definition
phases:
  1_discover:
    microservice: "fundamental_analyst_discover"
    description: "Data collection and foundational research"
    framework_phase: "discover"
    inputs:
      - ticker
      - depth
      - timeframe
      - confidence_threshold
    outputs:
      - discovery_data
      - structured_financial_data
      - market_context
    dependencies: []
    estimated_duration: "20s"

  2_analyze:
    microservice: "fundamental_analyst_analyze"
    description: "Systematic analysis and evaluation"
    framework_phase: "analyze"
    inputs:
      - discovery_data
      - ticker
      - confidence_threshold
    outputs:
      - financial_health_analysis
      - competitive_position_assessment
      - risk_assessment
      - valuation_model_inputs
    dependencies:
      - "1_discover"
    estimated_duration: "40s"

  3_synthesize:
    microservice: "fundamental_analyst_synthesize"
    description: "Integration and recommendation generation"
    framework_phase: "synthesize"
    inputs:
      - discovery_data
      - analysis_data
      - ticker
      - confidence_threshold
    outputs:
      - fundamental_analysis_document
      - investment_thesis
      - recommendation
    dependencies:
      - "1_discover"
      - "2_analyze"
    estimated_duration: "30s"
    critical_output: true

  4_validate:
    microservice: "fundamental_analyst_validate"
    description: "Quality assurance and confidence verification"
    framework_phase: "validate"
    inputs:
      - fundamental_analysis_document
      - ticker
      - confidence_threshold
    outputs:
      - validation_report
      - quality_assessment
      - reliability_score
    dependencies:
      - "3_synthesize"
    estimated_duration: "25s"

# Data Flow Definition
data_flow:
  1_discover:
    inputs_from: "user_parameters"
    outputs_to: ["2_analyze", "3_synthesize"]
    data_location: "/team-workspace/microservices/fundamental_analyst/discover/outputs/"

  2_analyze:
    inputs_from: ["1_discover", "user_parameters"]
    outputs_to: ["3_synthesize"]
    data_location: "/team-workspace/microservices/fundamental_analyst/analyze/outputs/"

  3_synthesize:
    inputs_from: ["1_discover", "2_analyze", "user_parameters"]
    outputs_to: ["4_validate", "file_system"]
    data_location: "/team-workspace/microservices/fundamental_analyst/synthesize/outputs/"
    file_output: "./data/outputs/fundamental_analysis/{ticker}_{YYYYMMDD}.md"

  4_validate:
    inputs_from: ["3_synthesize", "user_parameters"]
    outputs_to: ["team_workspace"]
    data_location: "/team-workspace/microservices/fundamental_analyst/validate/outputs/"

# Execution Configuration
execution:
  strategy: "sequential_dasv"
  parallel_opportunities: []
  error_handling: "fail_fast"
  rollback_strategy: "none"
  cache_strategy: "phase_based"

  validation_gates:
    1_discover:
      - "Required data sources available"
      - "Ticker symbol validated"
      - "Discovery confidence threshold met"

    2_analyze:
      - "Discovery data complete and valid"
      - "Financial metrics calculated successfully"
      - "Analysis confidence threshold met"

    3_synthesize:
      - "Discovery and analysis data available"
      - "Document generated in exact template format"
      - "Identical output to current implementation verified"

    4_validate:
      - "Analysis document exists and is readable"
      - "Validation completed successfully"
      - "Quality gates passed"

# Critical Integration Requirements
integration_requirements:
  fundamental_analyst_synthesize:
    critical_requirement: "Must produce institutional-quality fundamental analysis documents"
    validation_method: "File content comparison with existing output"
    regression_prevention: "Zero functional changes allowed"
    template_compliance: "Exact match to existing template structure"

# Performance Characteristics
performance:
  total_estimated_duration: "115s"
  optimization_strategies:
    - "Parallel data validation in discover phase"
    - "Cached peer group data reuse"
    - "Template-driven document generation"
    - "Efficient microservice data passing"

  success_criteria:
    - "All four DASV phases complete successfully"
    - "Final document saved to correct location"
    - "Document format identical to current implementation"
    - "Validation confirms institutional quality"

# Quality Assurance
quality_gates:
  pre_execution:
    - "All microservices available and discoverable"
    - "Required inputs provided and validated"
    - "Output directory exists and is writable"

  inter_phase:
    - "Each phase produces expected output format"
    - "Data flow between phases validated"
    - "Confidence thresholds maintained throughout"

  post_execution:
    - "Final markdown document generated"
    - "File saved to exact location: ./data/outputs/fundamental_analysis/"
    - "Content structure identical to current implementation"
    - "Validation report confirms quality standards"

# Collaboration Integration
collaboration:
  pre_execution_consultation: true
  topic_ownership_respect: true
  content_lifecycle_management: true
  superseding_workflow: false  # This is a new microservice implementation, not replacing content

  notifications:
    workflow_start:
      notify: ["team_workspace"]
      payload: ["workflow_name", "ticker", "estimated_duration"]

    phase_completion:
      notify: ["team_workspace", "next_phase"]
      payload: ["phase_name", "status", "outputs_available"]

    workflow_completion:
      notify: ["team_workspace"]
      payload: ["final_output_location", "validation_results", "performance_metrics"]

# Phase 1 Acceptance Criteria
acceptance_criteria:
  functional_equivalence:
    - "Sequential DASV execution produces institutional-quality fundamental analysis"
    - "File naming convention preserved: {TICKER}_{YYYYMMDD}.md"
    - "Output directory preserved: ./data/outputs/fundamental_analysis/"
    - "Document structure exactly matches existing template"
    - "All confidence scores maintain 0.0-1.0 format"
    - "Author attribution consistent: Cole Morton"

  quality_standards:
    - "Institutional-quality analysis maintained"
    - "All validation checks pass"
    - "Professional presentation preserved"
    - "Zero functional regression confirmed"

  technical_integration:
    - "Microservices discoverable via collaboration engine"
    - "Data flow between phases validated"
    - "Error handling prevents partial outputs"
    - "Performance within acceptable bounds"

# Future Evolution (Phase 2+)
extensibility:
  additional_roles:
    - "Phase 2 will support additional domain expert roles"
    - "Registry expansion for new microservice patterns"
    - "Workflow composition templates for new roles"

  optimization_opportunities:
    - "Parallel execution where dependencies allow"
    - "Intelligent caching across microservices"
    - "Dynamic workflow adaptation based on data quality"
    - "Cross-role collaboration patterns"

# Documentation Links
documentation:
  specification: "/Users/colemorton/Projects/sensylate/docs/ai-command-microservices-specification.md"
  microservices:
    - "/Users/colemorton/Projects/sensylate/team-workspace/microservices/fundamental_analyst/discover.md"
    - "/Users/colemorton/Projects/sensylate/team-workspace/microservices/fundamental_analyst/analyze.md"
    - "/Users/colemorton/Projects/sensylate/team-workspace/microservices/fundamental_analyst/synthesize.md"
    - "/Users/colemorton/Projects/sensylate/team-workspace/microservices/fundamental_analyst/validate.md"
  manifests:
    - "/Users/colemorton/Projects/sensylate/team-workspace/microservices/fundamental_analyst/discover/manifest.yaml"
    - "/Users/colemorton/Projects/sensylate/team-workspace/microservices/fundamental_analyst/analyze/manifest.yaml"
    - "/Users/colemorton/Projects/sensylate/team-workspace/microservices/fundamental_analyst/synthesize/manifest.yaml"
    - "/Users/colemorton/Projects/sensylate/team-workspace/microservices/fundamental_analyst/validate/manifest.yaml"
