---
export interface Props {
  enableAnalytics?: boolean;
  enableConsoleLogging?: boolean;
  enableBeacon?: boolean;
}

const {
  enableAnalytics = true,
  enableConsoleLogging = false,
  enableBeacon = true,
} = Astro.props;

const isDev = import.meta.env.DEV;
---

{
  isDev && (
    <div id="perf-indicator" class="fixed bottom-4 left-4 z-50">
      <div
        id="perf-status"
        class="rounded-lg bg-gray-900 px-3 py-2 font-mono text-xs text-white shadow-lg transition-all duration-300"
        style="border-left: 4px solid #888;"
      >
        Initializing...
      </div>
    </div>
  )
}

<script
  define:vars={{ enableAnalytics, enableConsoleLogging, enableBeacon, isDev }}
>
  // Only run if not already initialized
  if (typeof window !== "undefined" && !window.webVitalsMonitor) {
    (function () {
      // Web Vitals monitoring implementation
      const metrics = {};
      let isInitialized = false;

      // Performance thresholds based on Google's Core Web Vitals
      const thresholds = {
        LCP: { good: 2500, needsImprovement: 4000 },
        FID: { good: 100, needsImprovement: 300 },
        CLS: { good: 0.1, needsImprovement: 0.25 },
        FCP: { good: 1800, needsImprovement: 3000 },
        TTFB: { good: 800, needsImprovement: 1800 },
      };

      // Initialize the monitor
      const initMonitor = () => {
        if (isInitialized) return;
        isInitialized = true;

        // Update UI if in dev mode
        if (isDev) {
          const indicator = document.getElementById("perf-status");
          if (indicator) {
            indicator.style.borderLeft = "4px solid #00ff00";
            indicator.textContent = "Monitoring active";
          }
        }

        // Log initialization
        if (enableConsoleLogging) {
          console.log("[WebVitals] Monitor initialized");
        }
      };

      // Update metrics display
      const updateDisplay = () => {
        if (!isDev) return;

        const indicator = document.getElementById("perf-status");
        if (!indicator) return;

        const score = calculatePerformanceScore();
        const metricsText = Object.entries(metrics)
          .filter(([_, value]) => value !== null && value !== "unsupported")
          .map(([key, value]) => `${key}: ${Math.round(value)}ms`)
          .join(" | ");

        indicator.innerHTML = metricsText
          ? `${metricsText} | Score: ${score !== null ? score : "N/A"}`
          : "Collecting metrics...";

        // Update border color based on score
        if (score !== null) {
          const color =
            score >= 90 ? "#00ff00" : score >= 50 ? "#ffaa00" : "#ff0000";
          indicator.style.borderLeft = `4px solid ${color}`;
        }
      };

      // Calculate performance score
      const calculatePerformanceScore = () => {
        const scoredMetrics = ["LCP", "FID", "CLS"];
        const scores = [];

        for (const metric of scoredMetrics) {
          const value = metrics[metric];
          if (value === null || value === undefined || value === "unsupported")
            continue;

          const threshold = thresholds[metric];
          if (!threshold) continue;

          let score;
          if (metric === "CLS") {
            // CLS is not in milliseconds
            if (value <= threshold.good) score = 100;
            else if (value <= threshold.needsImprovement) score = 50;
            else score = 0;
          } else {
            if (value <= threshold.good) score = 100;
            else if (value <= threshold.needsImprovement) score = 50;
            else score = 0;
          }

          scores.push(score);
        }

        return scores.length > 0
          ? Math.round(scores.reduce((a, b) => a + b) / scores.length)
          : null;
      };

      // Report metric to analytics
      const reportMetric = (metric, value) => {
        metrics[metric] = value;
        updateDisplay();

        if (enableConsoleLogging) {
          console.log(`[WebVitals] ${metric}: ${value}`);
        }

        if (enableAnalytics && enableBeacon && navigator.sendBeacon) {
          // In production, you would send to your analytics endpoint
          const data = JSON.stringify({
            metric,
            value,
            url: window.location.href,
            timestamp: Date.now(),
          });

          // Placeholder for analytics endpoint
          // navigator.sendBeacon('/api/metrics', data);
        }
      };

      // Web Vitals collection
      const collectWebVitals = () => {
        // First Contentful Paint (FCP)
        const paintObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (entry.name === "first-contentful-paint") {
              reportMetric("FCP", entry.startTime);
            }
          }
        });

        try {
          paintObserver.observe({ entryTypes: ["paint"] });
        } catch (e) {
          metrics.FCP = "unsupported";
        }

        // Largest Contentful Paint (LCP)
        let lcpValue = 0;
        const lcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          lcpValue = lastEntry.startTime;
        });

        try {
          lcpObserver.observe({ entryTypes: ["largest-contentful-paint"] });

          // Report LCP when page is backgrounded or hidden
          ["visibilitychange", "pagehide"].forEach((type) => {
            addEventListener(
              type,
              () => {
                if (lcpValue > 0) {
                  reportMetric("LCP", lcpValue);
                  lcpObserver.disconnect();
                }
              },
              { once: true },
            );
          });
        } catch (e) {
          metrics.LCP = "unsupported";
        }

        // First Input Delay (FID)
        let fidValue = null;
        const fidObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (fidValue === null) {
              fidValue = entry.processingStart - entry.startTime;
              reportMetric("FID", fidValue);
            }
          }
        });

        try {
          fidObserver.observe({ entryTypes: ["first-input"] });
        } catch (e) {
          metrics.FID = "unsupported";
        }

        // Cumulative Layout Shift (CLS)
        let clsValue = 0;
        const clsObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (!entry.hadRecentInput) {
              clsValue += entry.value;
            }
          }
        });

        try {
          clsObserver.observe({ entryTypes: ["layout-shift"] });

          // Report CLS when page is backgrounded or hidden
          ["visibilitychange", "pagehide"].forEach((type) => {
            addEventListener(
              type,
              () => {
                reportMetric("CLS", clsValue);
                clsObserver.disconnect();
              },
              { once: true },
            );
          });
        } catch (e) {
          metrics.CLS = "unsupported";
        }

        // Time to First Byte (TTFB)
        const navigationEntry = performance.getEntriesByType("navigation")[0];
        if (navigationEntry) {
          reportMetric(
            "TTFB",
            navigationEntry.responseStart - navigationEntry.fetchStart,
          );
        }

        // Custom metrics
        reportMetric("ContentReady", performance.now());

        window.addEventListener("load", () => {
          reportMetric("InteractiveReady", performance.now());
        });
      };

      // Public API
      window.webVitalsMonitor = {
        getMetrics: () => ({ ...metrics }),
        getPerformanceScore: calculatePerformanceScore,
        isInitialized: () => isInitialized,
      };

      // Initialize when DOM is ready
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => {
          initMonitor();
          collectWebVitals();
        });
      } else {
        initMonitor();
        collectWebVitals();
      }
    })();
  }
</script>

<style>
  #perf-indicator {
    font-family:
      ui-monospace, SFMono-Regular, "SF Mono", Consolas, "Liberation Mono",
      Menlo, monospace;
  }

  @media (max-width: 640px) {
    #perf-indicator {
      bottom: 1rem;
      left: 1rem;
      font-size: 0.625rem;
    }

    #perf-status {
      padding: 0.25rem 0.5rem;
    }
  }
</style>
