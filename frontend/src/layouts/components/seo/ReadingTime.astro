---
import { analyzeContent } from "@/lib/seo/content-analyzers.ts";

export interface Props {
  content: string;
  variant?: 'minimal' | 'detailed';
  className?: string;
}

const {
  content,
  variant = 'minimal',
  className = ''
} = Astro.props;

// Calculate reading time
const contentMetrics = analyzeContent(content);
const minutes = contentMetrics.readingTimeMinutes;
const words = contentMetrics.wordCount;

// Format time display
const timeText = minutes === 1 ? '1 min read' : `${minutes} min read`;
const detailedText = `${words} words â€¢ ${timeText}`;
---

{variant === 'minimal' && (
  <span class={`reading-time-minimal inline-flex items-center text-sm text-gray-600 dark:text-gray-400 ${className}`}>
    <svg
      class="mr-1 h-4 w-4"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
      />
    </svg>
    <span aria-label={`Estimated reading time: ${timeText}`}>
      {timeText}
    </span>
  </span>
)}

{variant === 'detailed' && (
  <div class={`reading-time-detailed ${className}`}>
    <div class="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
      <span class="flex items-center">
        <svg
          class="mr-1 h-4 w-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
          />
        </svg>
        <span>{words} words</span>
      </span>

      <span class="flex items-center">
        <svg
          class="mr-1 h-4 w-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
        <span>{timeText}</span>
      </span>
    </div>

    <!-- Reading progress tracking -->
    <script define:vars={{ minutes, words }}>
      (function() {
        // Track reading progress milestones
        let hasTracked25 = false;
        let hasTracked50 = false;
        let hasTracked75 = false;
        let hasTracked100 = false;
        let startTime = Date.now();

        // Make tracking variables globally accessible for tests
        window._tracked25 = false;
        window._tracked50 = false;
        window._tracked75 = false;
        window._tracked100 = false;

        const trackMilestone = (percentage) => {
          const timeSpent = (Date.now() - startTime) / 1000; // seconds

          // Set global tracking variables for tests
          if (percentage === 25) window._tracked25 = true;
          if (percentage === 50) window._tracked50 = true;
          if (percentage === 75) window._tracked75 = true;
          if (percentage === 100) window._tracked100 = true;

          // Send analytics event (placeholder)
          if (typeof gtag !== 'undefined') {
            gtag('event', 'reading_progress', {
              'custom_parameter': percentage,
              'time_spent': timeSpent,
              'estimated_reading_time': minutes,
              'word_count': words
            });
          }

          // Send to other analytics services
          if (typeof window.webVitalsMonitor !== 'undefined') {
            window.webVitalsMonitor.trackReadingProgress = window.webVitalsMonitor.trackReadingProgress || [];
            window.webVitalsMonitor.trackReadingProgress.push({
              milestone: percentage,
              timeSpent: timeSpent,
              timestamp: Date.now()
            });
          }
        };

        const handleScroll = () => {
          const scrolled = window.scrollY;
          const maxScroll = document.body.scrollHeight - window.innerHeight;
          const scrollPercentage = (scrolled / maxScroll) * 100;

          if (scrollPercentage >= 25 && !hasTracked25) {
            hasTracked25 = true;
            trackMilestone(25);
          }

          if (scrollPercentage >= 50 && !hasTracked50) {
            hasTracked50 = true;
            trackMilestone(50);
          }

          if (scrollPercentage >= 75 && !hasTracked75) {
            hasTracked75 = true;
            trackMilestone(75);
          }

          if (scrollPercentage >= 90 && !hasTracked100) {
            hasTracked100 = true;
            trackMilestone(100);
          }
        };

        // Track time spent on page
        const trackTimeSpent = () => {
          const timeSpent = (Date.now() - startTime) / 1000; // seconds
          const estimatedTime = minutes * 60; // convert to seconds

          if (timeSpent >= estimatedTime * 0.8) { // 80% of estimated reading time
            if (typeof gtag !== 'undefined') {
              gtag('event', 'thorough_reading', {
                'time_spent': timeSpent,
                'estimated_time': estimatedTime,
                'word_count': words
              });
            }
          }
        };

        // Add scroll listener
        window.addEventListener('scroll', handleScroll, { passive: true });

        // Track when user leaves page
        window.addEventListener('beforeunload', trackTimeSpent);

        // Track visibility changes (tab switching)
        document.addEventListener('visibilitychange', () => {
          if (document.hidden) {
            trackTimeSpent();
          } else {
            startTime = Date.now(); // Reset timer when returning to tab
          }
        });
      })();
    </script>
  </div>
)}

<!-- Structured data for reading time -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Article",
  "timeRequired": `PT${minutes}M`,
  "wordCount": words
}
</script>
