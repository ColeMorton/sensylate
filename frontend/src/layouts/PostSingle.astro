---
import BlogCard from "@/components/BlogCard.astro";
import Share from "@/components/Share.astro";
import Support from "@/components/Support.astro";
import StructuredData from "@/layouts/components/seo/StructuredData.astro";
import EnhancedMeta from "@/layouts/components/seo/EnhancedMeta.astro";
import ReadingTime from "@/layouts/components/seo/ReadingTime.astro";
import Disqus from "@/helpers/Disqus";
import { getSinglePage } from "@/lib/contentParser.astro";
import dateFormat from "@/lib/utils/dateFormat";
import similarItems from "@/lib/utils/similarItems";
import { humanize, markdownify, slugify } from "@/lib/utils/textConverter";
import { render } from "astro:content";
import { FaRegClock, FaRegFolder } from "react-icons/fa";
import ImageMod from "./components/ImageMod.astro";

const { post } = Astro.props;

if (!post) {
  throw new Error(
    `PostSingle component error - post prop is undefined. Route: ${Astro.url.pathname}`,
  );
}

if (!post.data) {
  throw new Error(
    `PostSingle component error - post.data is undefined. Post ID: ${post.id || "unknown"}, Route: ${Astro.url.pathname}`,
  );
}

if (!post.collection) {
  throw new Error(
    `PostSingle component error - post.collection is undefined. Post ID: ${post.id || "unknown"}, Route: ${Astro.url.pathname}`,
  );
}

// Determine collection type from post.collection
const collectionType = post.collection;
const COLLECTION_FOLDER = collectionType;

const posts = await getSinglePage(COLLECTION_FOLDER);
const similarPosts = similarItems(post, posts);
const { Content } = await render(post);
const { title, description, categories, image, date, tags, author } = post.data;

// Get raw content for meta analysis
const rawContent = post.body;

// Generate appropriate URLs based on collection type
const getCategoryUrl = (category: string) => {
  return `/categories/${slugify(category)}`;
};

const getTagUrl = (tag: string) => {
  return `/tags/${slugify(tag)}`;
};
---

<!-- Enhanced Meta Tags for Article -->
<EnhancedMeta
  title={title}
  description={description}
  image={image}
  type="article"
  content={rawContent}
  datePublished={new Date(date)}
  dateModified={new Date(date)}
  author={author}
  categories={categories}
  tags={tags}
  canonical={`https://www.colemorton.com/blog/${post.id}/`}
/>

<!-- Article Schema Markup -->
<StructuredData
  type="article"
  title={title}
  description={description}
  datePublished={new Date(date)}
  dateModified={new Date(date)}
  image={image}
  categories={categories}
  tags={tags}
  slug={`blog/${post.id}`}
/>

<section class="section">
  <div class="container">
    <div class="row justify-center">
      <article class="lg:col-10 2xl:col-11">
        {
          image && (
            <div class="mb-10">
              <ImageMod
                src={image}
                alt={title}
                class="w-full rounded"
                format="webp"
              />
            </div>
          )
        }
        <h1 set:html={markdownify(title)} class="h2 mb-4" />
        <ul class="mb-4">
          <li class="mr-4 inline-block">
            <FaRegClock className={"-mt-1 mr-2 inline-block"} />
            {dateFormat(date)}
          </li>
          <li class="mr-4 inline-block">
            <ReadingTime content={rawContent} variant="minimal" className="" />
          </li>
          {
            categories && categories.length > 0 && (
              <li class="mr-4 inline-block">
                <FaRegFolder className={"-mt-1 mr-2 inline-block"} />
                {categories.map((category: string, index: number) => (
                  <span key={category} class="inline">
                    <a
                      class="text-text dark:text-darkmode-text hover:text-primary dark:hover:text-darkmode-primary transition-colors duration-200"
                      href={getCategoryUrl(category)}
                    >
                      {humanize(category)}
                    </a>
                    {index !== categories.length - 1 && ", "}
                  </span>
                ))}
              </li>
            )
          }
        </ul>
        <div class="content mb-10">
          <Content />
        </div>
        <!-- Post Meta Section -->
        <div
          class="border-border dark:border-darkmode-border bg-light dark:bg-darkmode-light mt-10 rounded-lg border p-6"
        >
          <div class="space-y-6">
            <!-- Tags Section -->
            <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
              <h5
                class="shrink-0 font-medium"
                style="color: var(--color-darkmode-text-dark);"
              >
                Tags:
              </h5>
              <div>
                {
                  tags.map((tag: string, index: number) => (
                    <span key={tag} class="inline">
                      <a
                        class="text-text dark:text-darkmode-text hover:text-primary dark:hover:text-darkmode-primary transition-colors duration-200"
                        href={getTagUrl(tag)}
                      >
                        {humanize(tag)}
                      </a>
                      {index !== tags.length - 1 && ", "}
                    </span>
                  ))
                }
              </div>
            </div>

            <!-- Divider -->
            <hr class="border-border dark:border-darkmode-border" />

            <!-- Share & Support Section -->
            <div
              class="flex flex-col gap-6 sm:flex-row sm:items-center sm:justify-between"
            >
              <!-- Share Section -->
              <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
                <h5
                  class="shrink-0 font-medium"
                  style="color: var(--color-darkmode-text-dark);"
                >
                  Share:
                </h5>
                <Share
                  className="social-icons"
                  title={title}
                  description={description}
                  slug={`blog/${post.id}`}
                />
              </div>

              <!-- Support Section -->
              <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
                <h5
                  class="shrink-0 font-medium"
                  style="color: var(--color-darkmode-text-dark);"
                >
                  Support:
                </h5>
                <Support className="support-icons" />
              </div>
            </div>
          </div>
        </div>
        <Disqus className="mt-20" client:load />
      </article>
    </div>

    <!-- Related posts -->
    <div class="section pb-0">
      <h2 class="h3 mb-12 text-center">Related Posts</h2>
      <div class="row justify-center">
        {
          similarPosts.map((post) => (
            <div class="mb-14 md:col-6 lg:col-4">
              <BlogCard data={post} />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>
