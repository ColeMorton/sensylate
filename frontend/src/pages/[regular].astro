---
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import PageHeader from "@/partials/PageHeader.astro";
import { render } from "astro:content";
import { isFeatureEnabled } from "@/lib/featureFlags";

// get static paths for all pages
export async function getStaticPaths() {
  const COLLECTION_FOLDER = "pages";

  const pages = await getSinglePage(COLLECTION_FOLDER);

  // DEBUG: Log all detected pages for static site generation
  console.log(
    "üîç [STATIC BUILD] Pages detected in collection:",
    pages.map((p) => ({
      id: p.id,
      slug: p.slug,
      data: { title: p.data.title, draft: p.data.draft },
    })),
  );

  // Filter out elements page if feature flag is disabled
  const filteredPages = pages.filter((page) => {
    if (page.id === "elements" && !isFeatureEnabled("elements_page")) {
      return false;
    }
    if (page.id === "charts" && !isFeatureEnabled("charts_page")) {
      return false;
    }
    return true;
  });

  const paths = filteredPages.map((page) => ({
    params: {
      regular: page.id,
    },
    props: { page },
  }));

  // DEBUG: Log generated static paths
  console.log(
    "üîç [STATIC BUILD] Generated static paths:",
    paths.map((p) => p.params.regular),
  );

  return paths;
}

// DEBUG: Route handler identification
console.log(
  `üîç [ROUTE DEBUG] [regular].astro processing URL: ${Astro.url.pathname}`,
);
console.log(`üîç [ROUTE DEBUG] Route params:`, Astro.params);
console.log(`üîç [ROUTE DEBUG] Development mode: ${import.meta.env.DEV}`);
console.log(`üîç [ROUTE DEBUG] Props page exists: ${!!Astro.props.page}`);

// In server mode (development), get page from params. In static mode, get from props.
let page;
if (import.meta.env.DEV && !Astro.props.page) {
  // Server mode: fetch page data based on route params
  const { regular } = Astro.params;
  console.log(`üîç [DEV MODE] Fetching page data for: ${regular}`);

  try {
    const allPages = await getSinglePage("pages");
    console.log(
      `üîç [DEV MODE] Available pages:`,
      allPages.map((p) => ({ id: p.id, slug: p.slug })),
    );

    page = allPages.find((p) => p.id === regular);

    if (!page) {
      console.error(`‚ùå [PAGE ERROR] No page found for route: ${regular}`);
      console.error(
        `‚ùå Available page IDs:`,
        allPages.map((p) => p.id),
      );
      return Astro.redirect("/404");
    }

    console.log(`‚úÖ [DEV MODE] Successfully found page: ${page.id}`);
  } catch (error) {
    console.error(`‚ùå [DEV MODE ERROR] Failed to fetch pages:`, error);
    return Astro.redirect("/404");
  }
} else {
  // Static mode: use props from getStaticPaths
  console.log(
    `üîç [STATIC MODE] Using page from props: ${Astro.props.page?.id}`,
  );
  page = Astro.props.page;
}

if (!page) {
  return Astro.redirect("/404");
}

const { title, meta_title, description, image } = page.data;
const { Content } = await render(page);
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <PageHeader title={title} />
  <section class="section-sm py-8">
    <div class="container">
      <div class="row">
        <div class="lg:col-12">
          <div class="content">
            <Content />
          </div>
        </div>
      </div>
    </div>
  </section>
</Base>
