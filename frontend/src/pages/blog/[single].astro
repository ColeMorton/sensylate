---
import Base from "@/layouts/Base.astro";
import PostSingle from "@/layouts/PostSingle.astro";
import { getSinglePage } from "@/lib/contentParser.astro";

export async function getStaticPaths() {
  const BLOG_FOLDER = "blog";

  try {
    const posts = await getSinglePage(BLOG_FOLDER);

    if (!posts || posts.length === 0) {
      console.warn(`No posts found in ${BLOG_FOLDER} collection`);
      return [];
    }

    // Filter out invalid posts and add validation
    const validPosts = posts.filter((post) => {
      if (!post || !post.id || !post.data) {
        console.warn(`Invalid post found:`, post);
        return false;
      }
      return true;
    });

    const paths = validPosts.map((post) => ({
      params: {
        single: post.id,
      },
      props: { post },
    }));

    console.log(`Generated ${paths.length} static paths for blog posts`);
    return paths;
  } catch (error) {
    console.error(`Error generating static paths for ${BLOG_FOLDER}:`, error);
    return [];
  }
}

const { post } = Astro.props;

// DEBUG: Route handler identification
console.log(
  `üîç [ROUTE DEBUG] [single].astro processing URL: ${Astro.url.pathname}`,
);
console.log(`üîç [ROUTE DEBUG] Route params:`, Astro.params);

// VALIDATION: Ensure this is actually a blog request
const urlPath = Astro.url.pathname;
if (
  !urlPath.startsWith("/blog/") ||
  urlPath === "/blog" ||
  urlPath === "/blog/"
) {
  console.error(
    `‚ùå [ROUTE ERROR] [single].astro incorrectly handling non-blog route: ${urlPath}`,
  );
  console.error(`‚ùå This should be handled by [regular].astro instead`);
  return Astro.redirect("/404");
}

// Debug logging to track post data flow
if (!post) {
  console.error(
    `‚ùå [POST ERROR] Post is undefined in [single].astro for URL: ${urlPath}`,
  );
  console.error(
    "This indicates a routing collision - non-blog requests reaching blog handler",
  );
} else if (!post.data) {
  console.warn("Post exists but post.data is undefined:", post.id);
}

console.log(
  `‚úÖ [ROUTE DEBUG] Successfully processing blog post: ${post?.id || "undefined"}`,
);
console.log(
  `‚úÖ [ROUTE DEBUG] Post collection: ${post?.collection || "undefined"}`,
);

const { title, meta_title, description, image } = post?.data || {};
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <PostSingle post={post} />
</Base>
