---
import Base from "@/layouts/Base.astro";
import PostSingle from "@/layouts/PostSingle.astro";
import { getSinglePage } from "@/lib/contentParser.astro";

export async function getStaticPaths() {
  const BLOG_FOLDER = "blog";
  const posts = await getSinglePage(BLOG_FOLDER);

  const paths = posts.map((post) => ({
    params: {
      single: post.id,
    },
    props: { post },
  }));
  return paths;
}

// DEBUG: Route handler identification (development only)
if (import.meta.env.DEV) {
  console.log(
    `🔍 [ROUTE DEBUG] [single].astro processing URL: ${Astro.url.pathname}`,
  );

  // Check if this route is incorrectly handling pages that should go to [regular].astro
  const shouldBeRegularRoute = [
    "charts",
    "elements",
    "about",
    "contact",
  ].includes(Astro.params.single || "");
  if (shouldBeRegularRoute) {
    console.error(
      `❌ [ROUTE ERROR] [single].astro incorrectly handling ${Astro.url.pathname}. This should be handled by [regular].astro`,
    );
  }
}

// In server mode (development), get post from params. In static mode, get from props.
let post;
if (import.meta.env.DEV && !Astro.props.post) {
  // Server mode: fetch post data based on route params
  const { single } = Astro.params;
  const allPosts = await getSinglePage("blog");
  post = allPosts.find((p) => p.id === single);

  if (!post) {
    throw new Error(
      `Blog post not found - no post with ID '${single}'. Available posts: ${allPosts.map((p) => p.id).join(", ")}`,
    );
  }
} else {
  // Static mode: use props from getStaticPaths
  post = Astro.props.post;
}

if (!post) {
  throw new Error(
    `Blog post not found - post prop is undefined. Route: ${Astro.url.pathname}`,
  );
}

if (!post.data) {
  throw new Error(
    `Blog post data is missing - post.data is undefined. Post ID: ${post.id || "unknown"}, Route: ${Astro.url.pathname}`,
  );
}

const { title, meta_title, description, image } = post.data;
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <PostSingle post={post} />
</Base>
